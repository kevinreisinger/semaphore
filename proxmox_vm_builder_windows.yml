# ==============================================================================
# ANSIBLE PLAYBOOK: Proxmox Windows VM Provisioning with Domain Join
# ==============================================================================

- name: 1. Provision a New Windows VM on Proxmox VE
  hosts: proxmox_hosts
  gather_facts: no
  connection: local

  vars:
    pve_host: "10.11.202.41"
    pve_user: ""        # e.g., ansible@pve
    pve_pass: ""
    pve_node: "pmve02"

    ansible_python_interpreter: /usr/bin/python3

    vm_id: 101
    vm_name: "kevireis-dload"
    template_id: 100
    ip_address_cidr: "10.11.202.14/24"
    gateway: "10.11.202.1"
    dns_servers: "10.11.202.25 10.11.202.30 75.75.75.75"

    win_user: "Administrator"
    win_password: "SecurePassword456"

    domain_name: "REISINGERS"
    domain_user: ""
    domain_password: ""

  tasks:
    - name: 1.1. Ensure Proxmox is reachable
      ansible.builtin.wait_for:
        host: "{{ pve_host }}"
        port: 8006
        timeout: 30
      delegate_to: localhost

    - name: 1.2. Clone Windows template and configure VM
      community.proxmox.proxmox_kvm:
        api_host: "{{ pve_host }}"
        api_user: "{{ pve_user }}"
        api_password: "{{ pve_pass }}"
        validate_certs: false
        node: "{{ pve_node }}"
        vmid: "{{ vm_id }}"
        name: "{{ vm_name }}"
        clone: "{{ template_id }}"
        full: true
        state: present
        cores: 2
        memory: 8192
        scsihw: virtio-scsi-pci
        net0: "virtio,bridge=vmbr0"
        ide2: "local:cloudinit"
        ciuser: "{{ win_user }}"
        cipassword: "{{ win_password }}"
        ipconfig0: "ip={{ ip_address_cidr }},gw={{ gateway }}"
        nameserver: "{{ dns_servers | replace(' ', ',') }}"
        agent: 1
      register: vm_creation_output
      environment:
        PYTHONPATH: "/usr/lib/python3/dist-packages"

    - name: 1.3. Start the new VM
      community.proxmox.proxmox_kvm:
        api_host: "{{ pve_host }}"
        api_user: "{{ pve_user }}"
        api_password: "{{ pve_pass }}"
        validate_certs: false
        node: "{{ pve_node }}"
        vmid: "{{ vm_id }}"
        state: started
      environment:
        PYTHONPATH: "/usr/lib/python3/dist-packages"

    - name: 1.4. Wait for WinRM to become available
      ansible.builtin.wait_for_connection:
        timeout: 600
        delay: 30
      delegate_to: localhost
      vars:
        ansible_host: "{{ ip_address_cidr | split('/') | first }}"
        ansible_port: 5986
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_transport: basic
        ansible_user: "{{ win_user }}"
        ansible_password: "{{ win_password }}"

    - name: 1.5. Add new VM to dynamic inventory
      ansible.builtin.add_host:
        name: "{{ vm_name }}"
        groups: newly_provisioned_windows
        ansible_host: "{{ ip_address_cidr | split('/') | first }}"
        ansible_port: 5986
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_transport: basic
        ansible_user: "{{ win_user }}"
        ansible_password: "{{ win_password }}"
      delegate_to: localhost


# ==============================================================================
# PLAY 2: DOMAIN JOIN USING MICROSOFT.AD COLLECTION
# ==============================================================================
- name: 2. Configure and Join VM to Active Directory Domain
  hosts: newly_provisioned_windows
  gather_facts: no
  connection: winrm

  tasks:
    - name: 2.1. Join VM to domain
      microsoft.ad.membership:
        dns_domain_name: "{{ domain_name }}"
        hostname: "{{ vm_name }}"
        state: domain
        domain_admin_user: "{{ domain_user }}"
        domain_admin_password: "{{ domain_password }}"
        reboot: true
        reboot_timeout: 1200
      register: domain_join_result

    - name: 2.2. Report domain join result
      ansible.builtin.debug:
        msg: >
          Domain join complete. Reboot required: {{ domain_join_result.reboot_required | default('Unknown') }}

    - name: 2.3. Wait for reboot (if needed)
      ansible.builtin.wait_for_connection:
        timeout: 600
        delay: 30
      when: domain_join_result.reboot_required | default(false)

    - name: 2.4. Verify domain membership
      ansible.builtin.debug:
        msg: "VM is reachable and joined to {{ domain_name }} as {{ vm_name }}"
