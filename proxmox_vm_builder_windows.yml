---
- name: Provision a New Windows VM on Proxmox VE
  hosts: pmve
  gather_facts: false
  vars:
    # Credentials (set in Semaphore)
    pve_user: ""
    pve_pass: ""
    win_password: ""
    domain_user: ""
    share_username: ""

    # VM configuration
    vm_template_vmid: "100"   # VMID of Windows template
    vm_new_vmid: "101"        # VMID for the new VM
    vm_name: "kevireis-dload"
    vm_node: "pmve02"
    vm_storage: "pmvenfs"
    vm_memory: 8192
    vm_cores: 4
    vm_disk_size: 100G

    # Optional static networking (if not provided, network task is skipped)
    vm_ip: "10.11.202.14"          # e.g. 10.11.202.14
    vm_netmask: 24
    vm_gateway: "10.11.202.1"
    vm_dns: "10.11.202.25 10.11.202.30 75.75.75.75"

  pre_tasks:
    - name: Ensure required collections are installed
      ansible.builtin.shell: |
        if ! ansible-galaxy collection list | grep -q community.general; then
          ansible-galaxy collection install community.general:6.9.0 -p ./collections
        fi
        if ! ansible-galaxy collection list | grep -q community.proxmox; then
          ansible-galaxy collection install community.proxmox:1.4.0 -p ./collections
        fi
      args:
        chdir: "{{ playbook_dir }}"
      changed_when: false
      delegate_to: localhost

  environment:
    ANSIBLE_COLLECTIONS_PATHS: "{{ playbook_dir }}/collections:/usr/share/ansible/collections"

  tasks:
    - name: Ensure Proxmox API is reachable
      community.general.uri:
        url: "https://{{ inventory_hostname }}:8006/api2/json/nodes"
        user: "{{ pve_user }}"
        password: "{{ pve_pass }}"
        method: GET
        validate_certs: no
      register: proxmox_api
      retries: 5
      delay: 10
      until: proxmox_api.status == 200

    - name: Clone Windows template and configure VM resources
      community.proxmox.proxmox_vm:
        api_user: "{{ pve_user }}"
        api_password: "{{ pve_pass }}"
        api_host: "{{ inventory_hostname }}"
        vmid: "{{ vm_new_vmid }}"
        name: "{{ vm_name }}"
        clone: "{{ vm_template_vmid }}"
        full: true
        cores: "{{ vm_cores }}"
        memory: "{{ vm_memory }}"
        disk: "{{ vm_disk_size }}"
        node: "{{ vm_node }}"
        storage: "{{ vm_storage }}"
        timeout: 30
      delegate_to: localhost

    - name: Wait for Windows VM to respond to WinRM
      ansible.windows.win_ping:
        ansible_user: "{{ domain_user }}"
        ansible_password: "{{ win_password }}"
        ansible_connection: winrm
        ansible_port: 5985
        ansible_winrm_transport: basic
      register: winrm_check
      retries: 10
      delay: 20
      until: winrm_check.ping == "pong"

    - name: Configure static IP networking (only if vm_ip is defined)
      ansible.windows.win_shell: |
        $Interface = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
        New-NetIPAddress -InterfaceAlias $Interface.Name -IPAddress "{{ vm_ip }}" -PrefixLength {{ vm_netmask }} -DefaultGateway "{{ vm_gateway }}"
        Set-DnsClientServerAddress -InterfaceAlias $Interface.Name -ServerAddresses "{{ vm_dns.split() | join(',') }}"
      vars:
        ansible_user: "{{ domain_user }}"
        ansible_password: "{{ win_password }}"
        ansible_connection: winrm
        ansible_port: 5985
        ansible_winrm_transport: basic
      when: vm_ip | length > 0

    - name: Create Temp directory on Windows VM
      ansible.windows.win_shell: |
        New-Item -Path "C:\Temp" -ItemType Directory -Force
      vars:
        ansible_user: "{{ domain_user }}"
        ansible_password: "{{ win_password }}"
        ansible_connection: winrm
        ansible_port: 5985
        ansible_winrm_transport: basic
