---
# ==============================================================================
# Global Variables for Proxmox and Windows Configuration
# These are available to both the provisioning (proxmox_hosts) and
# configuration (newly_provisioned_windows) plays.
# ==============================================================================
vars:
  # --- REQUIRED PROXMOX CREDENTIALS (API Access) ---
  pve_host: "192.168.1.10" # IP of your Proxmox server
  pve_user: "ansible_user@pve"
  pve_pass: "YourVaultPassword"
  pve_node: "pve-node-01" # The specific Proxmox node to build the VM on

  # --- NEW WINDOWS VM CONFIGURATION ---
  vm_id: 300 # Unique ID for the new VM (ensure this doesn't conflict with existing IDs)
  vm_name: "new-win-server-01"
  template_id: 150 # ID of the existing Windows template with Cloudbase-Init (MANDATORY)
  ip_address_cidr: "192.168.1.50/24" # IP address with CIDR for the new VM
  gateway: "192.168.1.1"
  # NEW: DNS server IPs, space-separated, to be configured via Cloudbase-Init
  dns_servers: "10.11.202.25 10.11.202.30 75.75.75.75"

  # --- WINDOWS GUEST LOGIN (Used by Cloudbase-Init for first boot & initial config) ---
  win_user: "Administrator" # Common default Windows user
  win_password: "SecurePassword456" # Temporary password set during Cloudbase-Init

  # --- DOMAIN JOIN CONFIGURATION (NEW) ---
  domain_name: "REISINGERS"
  domain_user: "Administrator@yourdomain.local" # Domain administrator account (must be UPN)
  domain_password: "DomainAdminPassword123" # Password for the domain admin user


# ==============================================================================
# PLAY 1: PROVISION THE VM ON PROXMOX
# ==============================================================================
- name: 1. Provision a New Windows VM on Proxmox VE
  # Runs on the Ansible control node (connection: local) and communicates with the Proxmox API.
  hosts: proxmox_hosts
  gather_facts: no
  connection: local

  tasks:
    - name: 1.1. Ensure Proxmox is available
      ansible.builtin.wait_for:
        host: "{{ pve_host }}"
        port: 8006
        timeout: 30
      delegate_to: localhost

    - name: 1.2. Clone the Windows template and configure VM resources
      community.general.proxmox_vm:
        api_host: "{{ pve_host }}"
        api_user: "{{ pve_user }}"
        api_password: "{{ pve_pass }}"
        node: "{{ pve_node }}"
        vmid: "{{ vm_id }}"
        name: "{{ vm_name }}"
        state: present
        target: "{{ template_id }}"
        clone: "{{ template_id }}"
        ostype: "win"
        cores: 2
        memory: 8192
        scsihw: "virtio-scsi-pci"
        # Network Configuration
        net:
          # ADDED ip_nameservers based on the new variable
          net0: "model=virtio,bridge=vmbr0,ip={{ ip_address_cidr }},gw={{ gateway }},ip_nameservers={{ dns_servers }}"
        # Cloudbase-Init Configuration (for Windows)
        ciuser: "{{ win_user }}"
        cipassword: "{{ win_password }}"
      register: vm_creation_output

    - name: 1.3. Start the newly provisioned Windows VM
      community.general.proxmox_vm:
        api_host: "{{ pve_host }}"
        api_user: "{{ pve_user }}"
        api_password: "{{ pve_pass }}"
        node: "{{ pve_node }}"
        vmid: "{{ vm_id }}"
        state: started

    - name: 1.4. Wait for the Windows VM to be available via WinRM
      # The IP address is extracted by splitting the CIDR string.
      ansible.builtin.wait_for_connection:
        timeout: 600
        delay: 30
      delegate_to: localhost
      vars:
        ansible_host: "{{ ip_address_cidr | split('/') | first }}"
        ansible_port: 5986
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_transport: basic
        ansible_user: "{{ win_user }}"
        ansible_password: "{{ win_password }}"

    - name: 1.5. Add Windows VM to the inventory for configuration
      # This allows the next play to target the new VM directly via WinRM.
      ansible.builtin.add_host:
        name: "{{ vm_name }}"
        groups: "newly_provisioned_windows"
        ansible_host: "{{ ip_address_cidr | split('/') | first }}"
        ansible_port: 5986
        ansible_connection: winrm
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_transport: basic
        ansible_user: "{{ win_user }}"
        ansible_password: "{{ win_password }}"
      delegate_to: localhost


# ==============================================================================
# PLAY 2: CONFIGURE AND JOIN THE VM TO THE DOMAIN
# ==============================================================================
- name: 2. Configure and Join VM to Active Directory Domain
  hosts: newly_provisioned_windows # Targets the VM added in Play 1
  gather_facts: no
  connection: winrm # Ensures WinRM is used for this play

  tasks:
    - name: 2.1. Ensure VM is joined to the domain
      ansible.windows.win_domain_membership:
        dns_domain_name: "{{ domain_name }}"
        hostname: "{{ vm_name }}" # Uses the name defined in vars
        state: domain
        domain_user: "{{ domain_user }}"
        domain_password: "{{ domain_password }}"
        # Set the server to the domain controller IP (if needed), otherwise DNS handles it
        # domain_server: "192.168.1.100"
        # Increase timeout as a reboot is often required after joining
        reboot_timeout: 1200
      register: domain_join_result

    - name: 2.2. Display Domain Join Result
      ansible.builtin.debug:
        msg: "Domain join task complete. Reboot required: {{ domain_join_result.reboot_required | default('Unknown') }}. VM is now a member of {{ domain_name }}"

    - name: 2.3. Wait for VM to reboot after domain join (if required)
      ansible.builtin.wait_for_connection:
        timeout: 600
        delay: 30
      when: domain_join_result.reboot_required is defined and domain_join_result.reboot_required

    - name: 2.4. Verify connection using the Domain Administrator credentials (Optional)
      # This task verifies that the VM is back up and that the domain join worked.
      # You can now use the domain account for subsequent management.
      ansible.builtin.debug:
        msg: "VM is reachable as a domain member."
      vars:
        ansible_user: "{{ domain_user }}"
        ansible_password: "{{ domain_password }}"
