---
- name: Windows Updates with Auto Reboot and Full Summary Reporting
  hosts: windows
  gather_facts: yes
  vars:
    skip_servers:
      - dc08.reisingers.com
      - kevireis-home.reisingers.com
      - kevireis-lt.reisingers.com
      - kevireis-vc2.reisingers.com
      - vmwvc1.reisingers.com
    share_unc_path: "\\\\kevireis-home\\i$\\Documents\\Kevin\\Network Documentation\\Server Updates"
    share_username: ""
    share_password: ""
    cleanup_days: 30

  tasks:

    - name: Ensure local Temp folder exists
      win_file:
        path: C:\Temp
        state: directory

    - name: Skip servers in skip list
      debug:
        msg: "Skipping patching for host {{ inventory_hostname }}"
      when: inventory_hostname in skip_servers

    - name: Install available Windows updates (skip excluded hosts)
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - Definition Updates
          - Windows Defender
          - Feature Packs
          - Service Packs
          - Tools
          - Update Rollups
          - Updates
          - Drivers
        reboot: no
      register: update_result
      when: inventory_hostname not in skip_servers

    - name: Generate Windows Update summary with pending updates and copy to share
      win_shell: |
        $HostName = "{{ inventory_hostname }}"
        $Timestamp = Get-Date -Format "yyyy-MM-dd_HHmm"
        $DateFolder = Get-Date -Format "yyyy-MM-dd"
        $LocalTemp = "C:\Temp"
        $ShareUNC = "{{ share_unc_path }}"
        $SummaryContent = @()

        # Ensure local date folder
        $LocalDatePath = Join-Path $LocalTemp $DateFolder
        if (!(Test-Path $LocalDatePath)) { New-Item -ItemType Directory -Path $LocalDatePath -Force | Out-Null }

        # Header
        $SummaryContent += "Windows Update Summary for $HostName"
        $SummaryContent += ""

        # Installed updates
        $SummaryContent += "Installed updates:"
        try {
            $Installed = Get-HotFix | Sort-Object InstalledOn -Descending
            if ($Installed.Count -gt 0) {
                foreach ($u in $Installed) {
                    $SummaryContent += " - $($u.HotFixID) ($($u.Description))"
                }
            } else {
                $SummaryContent += " - None"
            }
        } catch {
            $SummaryContent += " - Error retrieving installed updates"
        }

        # Failed updates (if PSWindowsUpdate available)
        $SummaryContent += ""
        $SummaryContent += "Failed updates:"
        try {
            if (Get-Command Get-WUHistory -ErrorAction SilentlyContinue) {
                $Failed = Get-WUHistory | Where-Object { $_.Result -ne "Succeeded" }
                if ($Failed) {
                    foreach ($f in $Failed) {
                        $SummaryContent += " - $($f.Title)"
                    }
                } else {
                    $SummaryContent += " - None"
                }
            } else {
                $SummaryContent += " - N/A (PSWindowsUpdate not available)"
            }
        } catch {
            $SummaryContent += " - Error retrieving failed updates"
        }

        # Pending updates
        $SummaryContent += ""
        $SummaryContent += "Pending updates:"
        try {
            if (Get-Command Get-WindowsUpdate -ErrorAction SilentlyContinue) {
                $Pending = Get-WindowsUpdate -MicrosoftUpdate -IgnoreUserInput -AcceptAll -WhatIf
                if ($Pending) {
                    foreach ($p in $Pending) {
                        $SummaryContent += " - $($p.Title)"
                    }
                } else {
                    $SummaryContent += " - None"
                }
            } else {
                $SummaryContent += " - N/A (PSWindowsUpdate not available)"
            }
        } catch {
            $SummaryContent += " - Error retrieving pending updates"
        }

        # Reboot check
        $RebootRequired = (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending") -or
                          (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired")
        $SummaryContent += ""
        $SummaryContent += "Reboot required: $RebootRequired"

        # Write summary locally
        $SummaryFileLocal = Join-Path $LocalDatePath "$HostName`_$Timestamp.txt"
        $SummaryContent | Out-File -FilePath $SummaryFileLocal -Encoding UTF8

        # Copy summary to share
        try {
            if ("{{ share_username }}" -ne "" -and "{{ share_password }}" -ne "") {
                $SecPass = ConvertTo-SecureString "{{ share_password }}" -AsPlainText -Force
                $Cred = New-Object System.Management.Automation.PSCredential("{{ share_username }}", $SecPass)
                New-PSDrive -Name Z -PSProvider FileSystem -Root $ShareUNC -Credential $Cred -ErrorAction Stop | Out-Null
                $SharePath = "Z:\$DateFolder"
            } else {
                $SharePath = Join-Path $ShareUNC $DateFolder
            }

            if (!(Test-Path $SharePath)) { New-Item -ItemType Directory -Path $SharePath -Force | Out-Null }
            Copy-Item $SummaryFileLocal -Destination $SharePath -Force
        } catch {
            Write-Host "⚠️ Could not copy summary to share: $_"
        }

        Write-Host "✅ Summary written to: $SummaryFileLocal"
      args:
        executable: powershell
      when: inventory_hostname not in skip_servers

    - name: Reboot if required
      win_reboot:
        reboot_timeout: 3600
      when: inventory_hostname not in skip_servers and update_result.reboot_required | default(false)
