---
- name: Automated Plex Media Server Backup (Local Staging + Explicit Share Credentials)
  # Target the specific Windows Server where Plex is installed
  hosts: server2k19.reisingers.com
  gather_facts: no

  vars:
    # --- PLEX & LOCAL CONFIGURATION ---
    plex_service_name: "PlexService"
    # WARNING: This uses $env:LOCALAPPDATA, which resolves to the WinRM user's AppData path. 
    # If the Plex data is stored under a different user's profile, this path will be empty.
    plex_data_path: "$env:LOCALAPPDATA\\Plex Media Server" 
    local_backup_root: "C:\\Program Files (x86)\\Plex Service\\Backup"
    local_staging_path: "{{ local_backup_root }}\\Staging"
    max_backups_to_keep: 10
    
    # --- NETWORK SHARE CONFIGURATION (MUST BE POPULATED!) ---
    share_username: "" 
    share_password: ""
    final_network_share: "\\\\kevireis-home\\i$\\Applications\\Plex Media Server\\Backup"
    
    # Drive letter for temporary mapping (Must be unused)
    mapped_drive_letter: "Z" 

    # Internal variable generation
    current_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M') }}"
    local_backup_file: "{{ local_backup_root }}\\{{ 'Plex_Backup_' + current_timestamp + '.zip' }}"
    final_backup_file: "{{ mapped_drive_letter }}:\\{{ 'Plex_Backup_' + current_timestamp + '.zip' }}"

  tasks:

    - name: Ensure local temporary and staging directories exist
      ansible.windows.win_file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ local_backup_root }}"
        - "{{ local_staging_path }}"

    - name: Execute Plex Backup and Network Copy Script (Single PowerShell Block)
      ansible.windows.win_powershell:
        script: |
          # --- Configuration (Pulled from Ansible variables) ---
          $plexService = '{{ plex_service_name }}'
          $plexDataPath = '{{ plex_data_path }}' # Using $env:LOCALAPPDATA here
          $localStagingPath = '{{ local_staging_path }}'
          $localBackupFile = '{{ local_backup_file }}'
          $maxBackups = {{ max_backups_to_keep }}
          $finalNetworkShare = '{{ final_network_share }}'
          $mappedDriveLetter = '{{ mapped_drive_letter }}'
          $finalBackupFile = '{{ final_backup_file }}'
          $shareUsername = '{{ share_username }}'
          $sharePassword = '{{ share_password }}' 
          
          # Helper function to ensure services are restarted on failure
          function Restart-Services {
              Write-Host "Attempting to restart Plex Media Server service..."
              Start-Service -Name $plexService -ErrorAction SilentlyContinue
          }

          # --- 1. Stop Plex service ---
          Write-Host "Stopping Plex Media Server service ($plexService)..."
          Stop-Service -Name $plexService -Force -ErrorAction Stop
          Start-Sleep -Seconds 5
          # Stop any residual Plex processes
          Get-Process -Name "Plex*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          
          # === DIAGNOSTIC CHECK 1: Verify the data source path ===
          Write-Host "INFO: WinRM User is running this script. $plexDataPath resolves to:"
          Write-Host (Resolve-Path "$plexDataPath" -ErrorAction SilentlyContinue)

          # --- 2. Copy Plex data (excluding Logs) to staging ---
          Write-Host "Copying Plex data from $plexDataPath to staging folder $localStagingPath..."
          # Note: robocopy sets $LASTEXITCODE based on copy status, not just 0/1 for success/fail
          robocopy "$plexDataPath" "$localStagingPath" /MIR /XF *.log /XD Logs | Out-Null
          
          # === DIAGNOSTIC CHECK 2: Check robocopy result and staging contents ===
          $RoboCopyExitCode = $LASTEXITCODE
          Write-Host "INFO: Robocopy Exit Code was $RoboCopyExitCode."

          $StagingCount = (Get-ChildItem -Path $localStagingPath -Force | Measure-Object).Count
          Write-Host "INFO: Staging folder contains $StagingCount items."

          if ($StagingCount -eq 0) {
              Write-Host "CRITICAL ERROR: Staging folder is EMPTY after Robocopy. The likely cause is $plexDataPath resolving to a path with no Plex data."
              Restart-Services
              exit 1
          }

          # --- 3. Create ZIP from staging ---
          Write-Host "Creating ZIP backup at $localBackupFile ..."
          try {
              if (Test-Path $localBackupFile) { Remove-Item $localBackupFile -Force }
              Compress-Archive -Path "$localStagingPath\*" -DestinationPath $localBackupFile -Force
          }
          catch {
              Write-Host "CRITICAL ERROR: Failed to compress ZIP. Error Details: $($_.Exception.Message)"
              Restart-Services
              exit 1
          }

          # --- 4. Clean staging folder ---
          Write-Host "Cleaning up staging folder $localStagingPath..."
          Remove-Item "$localStagingPath\*" -Recurse -Force

          # --- 5. Restart Plex service ---
          Restart-Services
          
          # --- 6. Map Network Drive with Specified Credentials ---
          Write-Host "Attempting to map network drive ${mappedDriveLetter}: to ${finalNetworkShare} with specified credentials..."
          
          cmd.exe /c net use ${mappedDriveLetter}: /delete /y | Out-Null # Remove existing mapping silently
          
          cmd.exe /c net use ${mappedDriveLetter}: "${finalNetworkShare}" "${sharePassword}" /user:"${shareUsername}" /persistent:no
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "CRITICAL ERROR: Failed to map network drive. Code $LASTEXITCODE. Check share credentials."
              Remove-Item $localBackupFile -Force -ErrorAction SilentlyContinue
              exit 1
          }
          Write-Host "Network drive mapped successfully."

          # --- 7. Copy Local ZIP to Mapped Drive ---
          Write-Host "Copying local backup to network share: $finalBackupFile ..."
          try {
              Copy-Item -Path $localBackupFile -Destination $finalBackupFile -Force
          } catch {
              Write-Host "CRITICAL ERROR: Failed to copy file to network share. $($_.Exception.Message)"
              # Attempt unmap/cleanup before exit
              cmd.exe /c net use ${mappedDriveLetter}: /delete /y | Out-Null
              Remove-Item $localBackupFile -Force -ErrorAction SilentlyContinue
              exit 1
          }

          # --- 8. Cleanup (Network Share Retention) ---
          Write-Host "Cleaning up old NETWORK backups, keeping only the last $maxBackups..."
          $backups = Get-ChildItem -Path ${mappedDriveLetter}:\\ -Filter "Plex_Backup_*.zip" |
                      Sort-Object LastWriteTime -Descending

          if ($backups.Count -gt $maxBackups) {
              $toDelete = $backups | Select-Object -Skip $maxBackups
              foreach ($file in $toDelete) {
                  Write-Host "Deleting old network backup: $($file.FullName)"
                  Remove-Item $file.FullName -Force
              }
          }

          # --- 9. Final Cleanup (Local ZIP and Drive) ---
          Write-Host "Removing local file $localBackupFile and unmapping drive ${mappedDriveLetter}: ..."
          Remove-Item $localBackupFile -Force -ErrorAction SilentlyContinue
          cmd.exe /c net use ${mappedDriveLetter}: /delete /y | Out-Null
          
          Write-Host "Plex Backup and Transfer completed successfully!"
      register: ps_output

    - name: Display PowerShell script output for diagnostics
      ansible.builtin.debug:
        var: ps_output.stdout_lines
