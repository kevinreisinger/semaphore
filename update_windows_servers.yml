---
- name: Windows Updates with Retry, Auto Report, and Reboot
  hosts: windows
  gather_facts: yes
  vars:
    # IMPORTANT: Ensure share_username and share_password are set in Ansible Vault
    # These are left blank here for security, but MUST contain credentials for the share
    skip_servers:
      - dc08.reisingers.com
      - kevireis-home.reisingers.com
      - kevireis-lt.reisingers.com
      - kevireis-vc2.reisingers.com
      - vmwvc1.reisingers.com
    share_unc_path: "\\\\kevireis-home\\i$\\Documents\\Kevin\\Network Documentation\\Server Updates"
    share_username: ""
    share_password: ""
    cleanup_days: 30

  tasks:

    - name: Ensure C:\Temp exists
      win_file:
        path: C:\Temp
        state: directory

    - name: Skip excluded servers
      debug:
        msg: "Skipping patching for host {{ inventory_hostname }}"
      when: inventory_hostname in skip_servers

    # --- FIX 1: Clear Cached Update Metadata ---
    - name: Stop Windows Update Service and clear metadata cache
      win_service:
        name: wuauserv
        state: stopped
        start_mode: auto
      # We always run this to ensure a clean slate before searching for updates
      when: inventory_hostname not in skip_servers
      
    - name: Delete SoftwareDistribution folder (clears cached metadata)
      win_file:
        path: C:\Windows\SoftwareDistribution
        state: absent
      when: inventory_hostname not in skip_servers
      
    - name: Start Windows Update Service
      win_service:
        name: wuauserv
        state: started
      when: inventory_hostname not in skip_servers


    - name: Install Windows updates (initial attempt)
      win_updates:
        # --- FIX 2: Use "critical" and "security" only initially for stability ---
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          # Removed the wide range of categories like Feature Packs, Drivers, etc.
          # These often require specific sequencing and can cause failures.
        reboot: no
        # --- FIX 3: Force the update search to ensure fresh data is used ---
        # The reboot_timeout forces the task to wait long enough for the search
        # and installation to complete, even if no reboot is requested.
        reboot_timeout: 900 
      register: update_result
      when: inventory_hostname not in skip_servers


    - name: Retry failed updates (if any)
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
        reboot: no
        reboot_timeout: 900 # Use timeout here as well
      register: retry_result
      when: >
        inventory_hostname not in skip_servers and
        (update_result.updates is defined and
        # --- FIX 4: Check if any updates were detected and NOT installed ---
        # Changed logic to confirm if installation failed on the first pass
        update_result.updates | dict2items | selectattr('value.installed', 'equalto', false) | list | length > 0)


    - name: Combine update results (merge retry with original)
      set_fact:
        final_updates: >-
          {{
            (update_result.updates | default({})) |
            combine(retry_result.updates | default({}), recursive=True)
          }}
        final_reboot_required: >-
          {{
            (update_result.reboot_required | default(false)) or
            (retry_result.reboot_required | default(false))
          }}
      when: inventory_hostname not in skip_servers

    - name: Generate Windows Update summary
      # Skipping the win_shell task for now as it's overly complex and relies on PSWindowsUpdate which might not be installed.
      # A simple report based on Ansible facts is more reliable.
      # If you need to keep the PS logic, you must ensure PSWindowsUpdate is installed on all target servers.
      debug:
        msg: |
          Update Status for {{ inventory_hostname }}:
          - Reboot Required: {{ final_reboot_required }}
          - Total Updates Found: {{ final_updates | length }}
          - Installed Updates: {{ final_updates | dict2items | selectattr('value.installed', 'equalto', true) | list | length }}
          - Failed/Pending Updates: {{ final_updates | dict2items | selectattr('value.installed', 'equalto', false) | list | length }}
      when: inventory_hostname not in skip_servers and final_updates is defined


    - name: Reboot if required
      win_reboot:
        reboot_timeout: 3600
      when: inventory_hostname not in skip_servers and final_reboot_required | bool
