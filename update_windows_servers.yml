---
- name: Windows Updates with Auto Reboot (skip specified hosts)
  hosts: windows
  gather_facts: yes
  vars:
    skip_servers:
      - dc08.reisingers.com
      - kevireis-vc2.reisingers.com
    share_unc_path: "\\\\kevireis-home\\i$\\Documents\\Kevin\\Network Documentation\\Server Updates\\"
    share_username: ""
    share_password: ""
    cleanup_days: 30

  tasks:

    - name: Ensure Temp directory exists
      win_file:
        path: C:\Temp
        state: directory

    - name: Skip patching/reboot if host is in skip_servers
      debug:
        msg: "Skipping patching for host {{ inventory_hostname }}"
      when: inventory_hostname in skip_servers

    - name: Install all available updates
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - Definition Updates
          - Windows Defender
          - Feature Packs
          - Service Packs
          - Tools
          - Update Rollups
          - Updates
          - Drivers
        reboot: no
      register: update_result
      when: inventory_hostname not in skip_servers

    - name: Create per-host update summary file locally and optionally copy to share
      win_shell: |
        $LocalTemp = "C:\Temp"
        $Timestamp = Get-Date -Format "yyyy-MM-dd_HHmm"
        $DateFolder = Get-Date -Format "yyyy-MM-dd"
        $DatePath = Join-Path $LocalTemp $DateFolder
        if (!(Test-Path $DatePath)) { New-Item -ItemType Directory -Path $DatePath -Force | Out-Null }

        $SummaryPathLocal = Join-Path $DatePath "{{ inventory_hostname }}_$Timestamp.txt"

        "Windows Update Summary for {{ inventory_hostname }}" | Out-File -FilePath $SummaryPathLocal
        "" | Out-File -FilePath $SummaryPathLocal -Append

        "Installed updates:" | Out-File -FilePath $SummaryPathLocal -Append
        $updates = {{ update_result.updates | default({}) | to_json }}
        if ($updates -and $updates -ne "{}") {
            $parsed = $updates | ConvertFrom-Json
            foreach ($u in $parsed.PSObject.Properties) {
                if ($u.Value.installed -eq $true) {
                    " - $($u.Value.title) (KB$($u.Value.kb -join ', KB'))" | Out-File -FilePath $SummaryPathLocal -Append
                }
            }
        } else { " - None" | Out-File -FilePath $SummaryPathLocal -Append }

        "" | Out-File -FilePath $SummaryPathLocal -Append
        "Failed updates:" | Out-File -FilePath $SummaryPathLocal -Append
        if ($updates -and $updates -ne "{}") {
            foreach ($u in $parsed.PSObject.Properties) {
                if ($u.Value.installed -ne $true) {
                    " - $($u.Value.title) (KB$($u.Value.kb -join ', KB'))" | Out-File -FilePath $SummaryPathLocal -Append
                }
            }
        } else { " - None" | Out-File -FilePath $SummaryPathLocal -Append }

        "" | Out-File -FilePath $SummaryPathLocal -Append
        "Reboot required: {{ update_result.reboot_required | default(false) }}" | Out-File -FilePath $SummaryPathLocal -Append

        # Copy to share if path is provided
        if ("{{ share_unc_path }}" -ne "") {
            try {
                if ("{{ share_username }}" -and "{{ share_password }}") {
                    $SecurePass = ConvertTo-SecureString "{{ share_password }}" -AsPlainText -Force
                    $Cred = New-Object System.Management.Automation.PSCredential("{{ share_username }}",$SecurePass)
                    New-PSDrive -Name Z -PSProvider FileSystem -Root "{{ share_unc_path }}" -Credential $Cred -ErrorAction Stop | Out-Null
                    Copy-Item -Path $SummaryPathLocal -Destination "Z:" -Force
                } else {
                    Copy-Item -Path $SummaryPathLocal -Destination "{{ share_unc_path }}" -Force
                }
            } catch {
                Write-Host "⚠️ Unable to copy summary to share; left on local C:\Temp"
            }
        }

      args:
        executable: powershell
      when: inventory_hostname not in skip_servers

    - name: Reboot if required (skip_servers excluded)
      win_reboot:
        reboot_timeout: 3600
      when: inventory_hostname not in skip_servers and update_result.reboot_required | default(false)
