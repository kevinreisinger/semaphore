---
- name: Windows Updates with Auto Reboot and Centralized Summary
  hosts: all
  gather_facts: no
  vars:
    skip_reboot_servers:
      - dc08.reisingers.com
      # Add more servers here
    temp_summary_dir: "C:\\Temp"

  tasks:

    - name: Install all available updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
          - UpdateRollups
          - Definition Updates
          - Drivers
          - Windows Defender
          - FeaturePacks
          - ServicePacks
          - Tools
          - Updates
        reboot: no
      register: update_result

    - name: Create per-host update summary file (PowerShell JSON conversion)
      win_shell: |
        $Timestamp = (Get-Date).ToString("yyyy-MM-dd_HH-mm-ss")
        $SummaryPath = Join-Path "{{ temp_summary_dir }}" "windows_update_summary_$Timestamp.txt"
        New-Item -ItemType Directory -Force -Path "{{ temp_summary_dir }}" | Out-Null

        "Windows Update Summary for $env:COMPUTERNAME" | Out-File -FilePath $SummaryPath
        "" | Out-File -FilePath $SummaryPath -Append

        $updateJson = {{ update_result.updates | to_json | quote }}
        $updates = $updateJson | ConvertFrom-Json

        if ($updates.PSObject.Properties.Count -gt 0) {
            foreach ($u in $updates.PSObject.Properties) {
                $title = $u.Value.title
                $kb = ($u.Value.kb -join ', ')
                $installed = $u.Value.installed
                if ($installed) {
                    "✅ $title ($kb)" | Out-File -FilePath $SummaryPath -Append
                } else {
                    "❌ $title ($kb)" | Out-File -FilePath $SummaryPath -Append
                }
            }
        } else {
            "No updates found." | Out-File -FilePath $SummaryPath -Append
        }

        "" | Out-File -FilePath $SummaryPath -Append

        $SkipReboot = @({{ skip_reboot_servers | map('quote') | join(', ') }})
        if ($SkipReboot -contains "{{ inventory_hostname }}") {
            if ({{ update_result.reboot_required | lower }}) {
                "⚠️ Reboot skipped (skip_reboot_servers)" | Out-File -FilePath $SummaryPath -Append
            } else {
                "✅ No reboot needed." | Out-File -FilePath $SummaryPath -Append
            }
        } else {
            if ({{ update_result.reboot_required | lower }}) {
                "⚠️ System will reboot automatically." | Out-File -FilePath $SummaryPath -Append
            } else {
                "✅ No reboot needed." | Out-File -FilePath $SummaryPath -Append
            }
        }

        "" | Out-File -FilePath $SummaryPath -Append
        "Summary file saved to: $SummaryPath" | Out-File -FilePath $SummaryPath -Append
      args:
        executable: powershell
      register: host_summary_path

    - name: Reboot if required (skip_reboot_servers excluded)
      win_reboot:
      when:
        - update_result.reboot_required
        - inventory_hostname not in skip_reboot_servers

    - name: Fetch host summary file to controller
      fetch:
        src: "{{ host_summary_path.stdout | default('C:\\Temp\\windows_update_summary_*.txt') }}"
        dest: "/tmp/windows_updates_{{ inventory_hostname }}.txt"
        flat: yes

    - name: Collect stats for centralized summary
      set_fact:
        centralized_update_stats: "{{ centralized_update_stats | default([]) + [{
          'host': inventory_hostname,
          'installed': update_result.installed_update_count | default(0),
          'failed': update_result.failed_update_count | default(0),
          'total': (update_result.installed_update_count | default(0)) + (update_result.failed_update_count | default(0)),
          'reboot_required': update_result.reboot_required | default(false)
        }] }}"

- name: Write centralized emoji-enhanced summary on controller
  hosts: localhost
  gather_facts: no
  vars:
    centralized_update_stats: "{{ hostvars | dict2items | map(attribute='value.centralized_update_stats') | select('defined') | sum(start=[]) }}"
    controller_summary_path: "/tmp/windows_updates_controller_summary.txt"
    skip_reboot_servers:
      - dc08.reisingers.com
  tasks:

    - name: Initialize controller summary table
      copy:
        content: |
          Centralized Windows Updates Summary
          Timestamp: {{ ansible_date_time.iso8601 }}

          +-------------------------+----------+--------+-------+------------------------------+
          | Host                    | Installed| Failed | Total | Status                       |
          +-------------------------+----------+--------+-------+------------------------------+
        dest: "{{ controller_summary_path }}"

    - name: Append per-host rows with emoji status
      lineinfile:
        path: "{{ controller_summary_path }}"
        line: |
          | {{ item.host | ljust(23) }} | {{ item.installed | string | ljust(8) }} | {{ item.failed | string | ljust(6) }} | {{ item.total | string | ljust(5) }} | {% if item.failed > 0 %}❌ Updates failed{% elif item.reboot_required and item.host in skip_reboot_servers %}⚠️ Reboot skipped{% elif item.reboot_required %}⚠️ Will reboot{% else %}✅ All good{% endif %} |
        insertafter: EOF
      loop: "{{ centralized_update_stats }}"

    - name: Append table footer with aggregate totals
      lineinfile:
        path: "{{ controller_summary_path }}"
        line: |
          +-------------------------+----------+--------+-------+------------------------------+
          | AGGREGATE TOTALS        | {{ centralized_update_stats | sum(attribute='installed') | string | ljust(8) }} | {{ centralized_update_stats | sum(attribute='failed') | string | ljust(6) }} | {{ centralized_update_stats | sum(attribute='total') | string | ljust(5) }} |                              |
          +-------------------------+----------+--------+-------+------------------------------+
        insertafter: EOF
