---
- name: Windows Updates with Auto Reboot (skip specified hosts)
  hosts: windows
  gather_facts: yes
  vars:
    skip_servers:
      - dc08.reisingers.com
      - kevireis-vc2.reisingers.com
    share_unc_path: "\\\\kevireis-home\\i$\\Documents\\Kevin\\Network Documentation\\Server Updates\\"
    share_username: ""
    share_password: ""
    cleanup_days: 30

  tasks:

    - name: Ensure Temp directory exists
      win_file:
        path: C:\\Temp
        state: directory

    - name: Skip patching/reboot if host is in skip_servers
      debug:
        msg: "Skipping patching for host {{ inventory_hostname }}"
      when: inventory_hostname in skip_servers

    - name: Install all available updates
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - Definition Updates
          - Windows Defender
          - Feature Packs
          - Service Packs
          - Tools
          - Update Rollups
          - Updates
          - Drivers
        reboot: no
      register: update_result
      when: inventory_hostname not in skip_servers

    - name: Create per-host update summary file locally and optionally on share
      win_shell: |
        param(
          [string]$LocalPath,
          [string]$SharePath,
          [string]$User,
          [string]$Pass,
          [int]$CleanupDays,
          [string]$UpdatesJson
        )

        $Timestamp = Get-Date -Format "yyyy-MM-dd_HHmm"
        $DateFolder = Get-Date -Format "yyyy-MM-dd"
        $TargetPath = $LocalPath

        # Attempt to use share if available
        try {
            if ($SharePath -and (Test-Path $SharePath)) {
                if ($User -and $Pass) {
                    $SecurePass = ConvertTo-SecureString $Pass -AsPlainText -Force
                    $Cred = New-Object System.Management.Automation.PSCredential($User, $SecurePass)
                    New-PSDrive -Name Z -PSProvider FileSystem -Root $SharePath -Credential $Cred -ErrorAction Stop | Out-Null
                    $TargetPath = "Z:"
                } else {
                    $TargetPath = $SharePath
                }
            }
        } catch {
            Write-Host "⚠️ Unable to access share, using local path $LocalPath"
            $TargetPath = $LocalPath
        }

        # Create dated subfolder
        $DatePath = Join-Path $TargetPath $DateFolder
        if (!(Test-Path $DatePath)) { New-Item -ItemType Directory -Path $DatePath -Force | Out-Null }

        $SummaryPath = Join-Path $DatePath "{{ inventory_hostname }}_$Timestamp.txt"

        # Initialize summary
        "Windows Update Summary for {{ inventory_hostname }}" | Out-File -FilePath $SummaryPath
        "" | Out-File -FilePath $SummaryPath -Append

        # Installed updates
        "Installed updates:" | Out-File -FilePath $SummaryPath -Append
        $updates = @{}
        try { $updates = $UpdatesJson | ConvertFrom-Json } catch {}
        if ($updates -and $updates.PSObject.Properties.Count -gt 0) {
            foreach ($u in $updates.PSObject.Properties) {
                if ($u.Value.installed -eq $true) {
                    " - $($u.Value.title) (KB$($u.Value.kb -join ', KB'))" | Out-File -FilePath $SummaryPath -Append
                }
            }
        } else {
            " - None" | Out-File -FilePath $SummaryPath -Append
        }

        # Failed updates
        "" | Out-File -FilePath $SummaryPath -Append
        "Failed updates:" | Out-File -FilePath $SummaryPath -Append
        if ($updates -and $updates.PSObject.Properties.Count -gt 0) {
            foreach ($u in $updates.PSObject.Properties) {
                if ($u.Value.installed -ne $true) {
                    " - $($u.Value.title) (KB$($u.Value.kb -join ', KB'))" | Out-File -FilePath $SummaryPath -Append
                }
            }
        } else {
            " - None" | Out-File -FilePath $SummaryPath -Append
        }

        "" | Out-File -FilePath $SummaryPath -Append
        "Reboot required: {{ update_result.reboot_required | default(false) }}" | Out-File -FilePath $SummaryPath -Append

        # Cleanup old folders
        try {
            $Cutoff = (Get-Date).AddDays(-$CleanupDays)
            Get-ChildItem -Path $TargetPath -Directory | Where-Object { $_.LastWriteTime -lt $Cutoff } | ForEach-Object { Remove-Item -Recurse -Force -Path $_.FullName }
        } catch {}

      args:
        executable: powershell
      vars:
        LocalPath: "C:\\Temp"
        SharePath: "{{ share_unc_path }}"
        User: "{{ share_username | default('') }}"
        Pass: "{{ share_password | default('') }}"
        CleanupDays: "{{ cleanup_days }}"
        UpdatesJson: "{{ update_result.updates | default({}) | to_json | replace('\n','') | replace('\'','\'\'') }}"
      when: inventory_hostname not in skip_servers

    - name: Reboot if required (skip_servers excluded)
      win_reboot:
        reboot_timeout: 3600
      when: inventory_hostname not in skip_servers and update_result.reboot_required | default(false)
