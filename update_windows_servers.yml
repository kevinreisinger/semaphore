---
- name: Windows Updates with Auto Reboot (skip specified hosts, force-install on Server 2019+)
  hosts: windows
  gather_facts: yes
  vars:
    skip_servers:
      - dc08.reisingers.com
      - kevireis-home.reisingers.com
      - kevireis-lt.reisingers.com
      - kevireis-vc2.reisingers.com
      - vmwvc1.reisingers.com
    share_unc_path: "\\\\kevireis-home\\i$\\Documents\\Kevin\\Network Documentation\\Server Updates\\"
    share_username: ""
    share_password: ""
    cleanup_days: 30

  tasks:

    - name: Ensure Temp directory exists
      win_file:
        path: C:\Temp
        state: directory

    - name: Skip patching/reboot if host is in skip_servers
      debug:
        msg: "Skipping patching for host {{ inventory_hostname }}"
      when: inventory_hostname in skip_servers

    - name: Get Windows version (ReleaseId or BuildNumber)
      win_shell: |
        (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").ReleaseId
      register: win_releaseid
      when: inventory_hostname not in skip_servers

    - name: Install updates on Server 2019+ using PSWindowsUpdate (force MicrosoftUpdate)
      win_shell: |
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        # Install PSWindowsUpdate module if missing
        if (-not (Get-Module -ListAvailable -Name PSWindowsUpdate)) {
            Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
            Install-Module -Name PSWindowsUpdate -Force -Scope CurrentUser -AllowClobber
        }

        Import-Module PSWindowsUpdate

        # Start Windows Update service
        Start-Service wuauserv -ErrorAction SilentlyContinue

        # Download and install all available updates
        Get-WindowsUpdate -MicrosoftUpdate -IgnoreUserInput -AcceptAll | `
          Install-WindowsUpdate -MicrosoftUpdate -AcceptAll -IgnoreReboot -Verbose

        # Output list of installed updates for Ansible capture
        $updates = Get-WUHistory | Sort-Object Date -Descending | Select-Object -First 20
        $updates | ConvertTo-Json -Depth 5
      register: update_result
      when:
        - inventory_hostname not in skip_servers
        - win_releaseid.stdout | int >= 1809

    - name: Install updates on older Windows versions using win_updates
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - Definition Updates
          - Windows Defender
          - Feature Packs
          - Service Packs
          - Tools
          - Update Rollups
          - Updates
          - Drivers
        state: installed
        reboot: no
      register: update_result
      when:
        - inventory_hostname not in skip_servers
        - win_releaseid.stdout | int < 1809

    - name: Create per-host update summary file on C:\Temp and share
      win_shell: |
        $Timestamp = Get-Date -Format "yyyy-MM-dd_HHmm"
        $DateFolder = Get-Date -Format "yyyy-MM-dd"
        $HostName = "{{ inventory_hostname }}"
        $LocalPath = "C:\Temp"
        $SharePath = "{{ share_unc_path }}"

        $SummaryFileLocal = Join-Path $LocalPath "$HostName`_$Timestamp.txt"
        $SummaryFileShare = Join-Path $SharePath "$DateFolder\$HostName`_$Timestamp.txt"

        $UpdatesJson = '{{ update_result.stdout | default("{}") | replace("`n","") | replace("`r","") }}'
        try { $Updates = $UpdatesJson | ConvertFrom-Json } catch { $Updates = @() }

        $lines = @()
        $lines += "Windows Update Summary for $HostName"
        $lines += ""
        $lines += "Installed Updates:"
        if ($Updates -and $Updates.Count -gt 0) {
            foreach ($u in $Updates) {
                $lines += " - $($u.Title) ($($u.ResultCode)) $($u.Date)"
            }
        } else {
            $lines += " - None"
        }

        # Write to C:\Temp
        $lines | Out-File -FilePath $SummaryFileLocal -Force

        # Write to share if available
        try {
            if (Test-Path $SharePath) {
                $DatePath = Join-Path $SharePath $DateFolder
                if (!(Test-Path $DatePath)) { New-Item -ItemType Directory -Path $DatePath -Force | Out-Null }
                $lines | Out-File -FilePath $SummaryFileShare -Force
            }
        } catch {
            Write-Host "⚠️ Could not write to share."
        }

        # Cleanup old folders
        try {
            $Cutoff = (Get-Date).AddDays(-{{ cleanup_days }})
            Get-ChildItem -Path $LocalPath -Directory | Where-Object { $_.LastWriteTime -lt $Cutoff } | ForEach-Object {
                Remove-Item -Recurse -Force -Path $_.FullName
            }
        } catch {}
      args:
        executable: powershell
      when: inventory_hostname not in skip_servers

    - name: Reboot if required (skip_servers excluded)
      win_reboot:
        reboot_timeout: 3600
      when: inventory_hostname not in skip_servers
