---
- name: Windows Updates with Auto Reboot (skip specified hosts)
  hosts: windows
  gather_facts: yes
  vars:
    skip_servers:
      - dc08.reisingers.com
      - kevireis-vc2.reisingers.com
    share_unc_path: "\\\\kevireis-home\\i$\\Documents\\Kevin\\Network Documentation\\Server Updates\\"
    share_username: ""
    share_password: ""
    cleanup_days: 30

  tasks:

    - name: Ensure Temp directory exists
      win_file:
        path: C:\Temp
        state: directory

    - name: Skip patching/reboot if host is in skip_servers
      debug:
        msg: "Skipping patching for host {{ inventory_hostname }}"
      when: inventory_hostname in skip_servers

    - name: Install all available updates
      win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - Definition Updates
          - Windows Defender
          - Feature Packs
          - Service Packs
          - Tools
          - Update Rollups
          - Updates
          - Drivers
        reboot: no
      register: update_result
      when: inventory_hostname not in skip_servers

    - name: Create per-host update summary file locally and optionally on share
      win_shell: |
        param(
          [string]$LocalPath,
          [string]$SharePath,
          [string]$User,
          [string]$Pass,
          [int]$CleanupDays,
          [string]$UpdatesJson
        )

        Write-Host "Starting update summary for host {{ inventory_hostname }}"

        # Default to local path first
        $SummaryPathLocal = Join-Path $LocalPath "{{ inventory_hostname }}_windows_update_summary.txt"

        # Initialize summary file
        "Windows Update Summary for {{ inventory_hostname }}" | Out-File -FilePath $SummaryPathLocal
        "" | Out-File -FilePath $SummaryPathLocal -Append

        # Parse updates safely
        if ($UpdatesJson -and $UpdatesJson -ne '{}') {
            try {
                $updates = $UpdatesJson | ConvertFrom-Json
            } catch {
                Write-Host "⚠️ Failed to parse updates JSON"
                $updates = @{}
            }
        } else {
            $updates = @{}
        }

        # Installed updates
        "Installed updates:" | Out-File -FilePath $SummaryPathLocal -Append
        if ($updates.PSObject.Properties.Count -gt 0) {
            foreach ($u in $updates.PSObject.Properties) {
                if ($u.Value.installed -eq $true) {
                    " - $($u.Value.title) (KB$($u.Value.kb -join ', KB'))" | Out-File -FilePath $SummaryPathLocal -Append
                }
            }
        } else {
            " - None" | Out-File -FilePath $SummaryPathLocal -Append
        }

        # Failed updates
        "" | Out-File -FilePath $SummaryPathLocal -Append
        "Failed updates:" | Out-File -FilePath $SummaryPathLocal -Append
        if ($updates.PSObject.Properties.Count -gt 0) {
            foreach ($u in $updates.PSObject.Properties) {
                if ($u.Value.installed -ne $true) {
                    " - $($u.Value.title) (KB$($u.Value.kb -join ', KB'))" | Out-File -FilePath $SummaryPathLocal -Append
                }
            }
        } else {
            " - None" | Out-File -FilePath $SummaryPathLocal -Append
        }

        "" | Out-File -FilePath $SummaryPathLocal -Append
        "Reboot required: {{ update_result.reboot_required | default(false) }}" | Out-File -FilePath $SummaryPathLocal -Append
        Write-Host "Summary written to $SummaryPathLocal"

        # Attempt to copy to share if defined
        if ($SharePath -and $SharePath -ne "") {
            try {
                if ($User -and $Pass) {
                    $SecurePass = ConvertTo-SecureString $Pass -AsPlainText -Force
                    $Cred = New-Object System.Management.Automation.PSCredential($User, $SecurePass)
                    New-PSDrive -Name Z -PSProvider FileSystem -Root $SharePath -Credential $Cred -ErrorAction Stop | Out-Null
                    $Destination = Join-Path Z: (Split-Path $SummaryPathLocal -Leaf)
                    Copy-Item -Path $SummaryPathLocal -Destination $Destination -Force
                } else {
                    $Destination = Join-Path $SharePath (Split-Path $SummaryPathLocal -Leaf)
                    Copy-Item -Path $SummaryPathLocal -Destination $Destination -Force
                }
                Write-Host "Summary copied to share: $Destination"
            } catch {
                Write-Host "⚠️ Unable to copy summary to share; left on local path"
            }
        }

        # Cleanup old files
        try {
            $Cutoff = (Get-Date).AddDays(-$CleanupDays)
            Get-ChildItem -Path $LocalPath -Filter "*.txt" | Where-Object { $_.LastWriteTime -lt $Cutoff } | Remove-Item -Force
        } catch {}

      args:
        executable: powershell
      vars:
        LocalPath: "C:\Temp"
        SharePath: "{{ share_unc_path }}"
        User: "{{ share_username | default('') }}"
        Pass: "{{ share_password | default('') }}"
        CleanupDays: "{{ cleanup_days }}"
        UpdatesJson: "{{ update_result.updates | default({}) | to_json | replace('\n','') | replace('\'','\'\'') }}"
      when: inventory_hostname not in skip_servers

    - name: Reboot if required (skip_servers excluded)
      win_reboot:
        reboot_timeout: 3600
      when: inventory_hostname not in skip_servers and update_result.reboot_required | default(false)
