---
- name: Install 7-Zip (MSI) on Windows Host via Mapped Drive
  hosts: windows # Target host group
  gather_facts: no

  vars:
    app_name: "7-Zip 25.01 (x64)"
    
    # --- UNC PATH CONFIGURATION ---
    mapped_drive_letter: "Z" # CRITICAL: Drive letter (now without colon for New-PSDrive)
    share_unc_root: "\\\\kevireis-home\\i$"
    
    # Path relative to the share root (used after mapping the Z: drive)
    installer_relative_path: "Applications\\Utilities\\7-Zip\\v25.01\\Setup.msi" 
    
    # Full source path for win_copy, using the mapped drive letter
    installer_mapped_path: "{{ mapped_drive_letter }}:\\{{ installer_relative_path }}"
    
    # Local path on the target Windows machine for installation
    local_installer_path: 'C:\Windows\Temp\7zip_install.msi'
    
    # CRITICAL: Product ID for 7-Zip 25.01 (x64)
    product_id: "{23170F69-40C1-2702-2501-000100000000}" 

    # --- REQUIRED: Set these via Semaphore Credential! ---
    share_username: ""
    share_password: ""
    # ---------------------------------------------------

  tasks:
    - name: 1. MAP UNC Path to Drive Letter (Z:) and Authenticate Session (PowerShell Native)
      ansible.windows.win_shell: |
        try {
          # Read credentials securely passed from the environment
          $user = $env:SHARE_USER
          $pass_string = $env:SHARE_PASS
          
          # Create a Secure String for the password
          $pass = ConvertTo-SecureString -String $pass_string -AsPlainText -Force
          # Create a PSCredential object
          $cred = New-Object System.Management.Automation.PSCredential $user, $pass
          
          # FIX 1: Removed '-Force' which caused the "parameter cannot be found" error on older PS versions.
          Write-Host "Attempting to map {{ share_unc_root }} to {{ mapped_drive_letter }}:..."
          New-PSDrive -Name "{{ mapped_drive_letter }}" -PSProvider FileSystem -Root "{{ share_unc_root }}" -Credential $cred -Scope Global
          Write-Host "Drive mapped successfully."
        }
        catch {
          # Capture the specific error and write it to the error stream (stderr)
          Write-Error "Failed to map network drive. ERROR: $($_.Exception.Message)"
          exit 1 # Ensure Ansible sees the failure
        }
      
      environment:
        SHARE_USER: "{{ share_username }}"
        SHARE_PASS: "{{ share_password }}"
        
      no_log: true
      # FIX 2: Removed temporary 'ignore_errors: yes' to ensure the playbook halts if auth fails.
      register: auth_result
      # This task will now only succeed if the drive is mapped, otherwise it fails loudly.

    - name: 2. COPY 7-Zip Installer to Local Temp Directory (Using Mapped Drive Z:)
      ansible.windows.win_copy:
        src: "{{ installer_mapped_path }}"
        dest: "{{ local_installer_path }}"
        remote_src: yes # The source path (Z:\...) exists on the remote machine
      register: copy_result
      # Only run if authentication was successful
      when: auth_result is succeeded
      
    - name: 3. INSTALL 7-Zip from Local Path (with Idempotency Check)
      ansible.windows.win_shell: |
        $AppID = '{{ product_id }}'
        $Installed = Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* -ErrorAction SilentlyContinue |
                     Where-Object {$_.PSChildName -eq $AppID}
        
        if (-not $Installed) {
            Write-Host "Installing {{ app_name }} from LOCAL path: {{ local_installer_path }}"
            # Run msiexec directly from the local C:\Windows\Temp path
            msiexec.exe /i "{{ local_installer_path }}" /qn /norestart
        } else {
            Write-Host "{{ app_name }} is already installed. Skipping installation."
        }
      register: install_result
      changed_when: "'Installing' in install_result.stdout"
      # FIX 4: Only run if the COPY task succeeded.
      when: copy_result is succeeded

    - name: 4. CLEANUP local installer file
      # Remove the temporary installer from the target machine.
      ansible.windows.win_file:
        path: "{{ local_installer_path }}"
        state: absent
      # FIX 4: Only clean up if the COPY task succeeded.
      when: copy_result is succeeded

    - name: 5. UN-AUTHENTICATE (Delete Mapped Drive Z:)
      # FIX 5: Only attempt to remove the drive if Task 1 actually succeeded in creating it.
      ansible.windows.win_shell: Remove-PSDrive -Name "{{ mapped_drive_letter }}" -Force -ErrorAction SilentlyContinue
      ignore_errors: yes 
      failed_when: false
      when: auth_result is succeeded

    - name: Display installation status
      ansible.builtin.debug:
        msg: "Installation task complete. Output: {{ install_result.stdout_lines | default('Installation status not captured, check host logs.') }}"
      # Only show final success message if the install was attempted and succeeded.
      when: install_result is defined and install_result is succeeded
