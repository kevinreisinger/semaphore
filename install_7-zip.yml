---
- name: Install 7-Zip (MSI) on Windows Host via UNC Path Authentication
  hosts: windows # Target host group
  gather_facts: no

  vars:
    app_name: "7-Zip 25.01 (x64)"
    
    # --- UNC PATH CONFIGURATION ---
    installer_unc_path: "\\\\kevireis-home\\i$\\Applications\\Utilities\\7-Zip\\v25.01\\Setup.msi" 
    share_unc_root: "\\\\kevireis-home\\i$"
    
    # NEW: Local path on the target Windows machine
    local_installer_path: 'C:\Windows\Temp\7zip_install.msi'
    
    # CRITICAL: Product ID for 7-Zip 25.01 x64
    product_id: "{23170F69-40C1-2702-2501-000100000000}" 

    # --- REQUIRED: Set these via Semaphore Credential! ---
    share_username: ""
    share_password: ""
    # ---------------------------------------------------

  tasks:
    - name: 1. AUTHENTICATE WinRM Session to UNC Path
      # Authenticate the WinRM session against the UNC path using explicit credentials.
      ansible.windows.win_command: 'net use "{{ share_unc_root }}" "{{ share_password }}" /user:"{{ share_username }}" /persistent:no /force'
      no_log: true
      ignore_errors: yes 
      register: auth_result

    - name: 2. COPY 7-Zip Installer to Local Temp Directory (Using PowerShell Copy-Item)
      # FIX: Use Copy-Item in win_shell. This ensures the copy operation runs in the 
      # authenticated shell session established in Task 1, resolving "Access is denied."
      ansible.windows.win_shell: |
        # Use Copy-Item to copy from the authenticated UNC path to the local temp directory.
        Copy-Item -Path '{{ installer_unc_path }}' -Destination '{{ local_installer_path }}' -Force
      register: copy_result
      # Only run if authentication was attempted/successful
      when: auth_result is not skipped

    - name: 3. INSTALL 7-Zip from Local Path (with Idempotency Check)
      # Executes the installer from the local disk, avoiding all UNC/double-hop issues during install.
      ansible.windows.win_shell: |
        $AppID = '{{ product_id }}'
        # Check registry for the product ID
        $Installed = Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* -ErrorAction SilentlyContinue |
                     Where-Object {$_.PSChildName -eq $AppID}
        
        if (-not $Installed) {
            Write-Host "Installing {{ app_name }} from LOCAL path: {{ local_installer_path }}"
            # Run msiexec directly from the local C:\Windows\Temp path
            msiexec.exe /i "{{ local_installer_path }}" /qn /norestart
        } else {
            Write-Host "{{ app_name }} is already installed. Skipping installation."
        }
      register: install_result
      changed_when: "'Installing' in install_result.stdout"

    - name: 4. CLEANUP local installer file
      # Remove the temporary installer from the target machine.
      ansible.windows.win_file:
        path: "{{ local_installer_path }}"
        state: absent
      # Only clean up if the copy task succeeded.
      when: copy_result is succeeded

    - name: 5. UN-AUTHENTICATE (Delete net use entry)
      # Attempts to delete the temporary connection, ignoring cleanup errors.
      ansible.windows.win_command: net use "{{ share_unc_root }}" /delete
      ignore_errors: yes 
      failed_when: false

    - name: Display installation status
      ansible.builtin.debug:
        msg: "Installation task complete. Output: {{ install_result.stdout_lines | default('Installation status not captured, check host logs.') }}"
