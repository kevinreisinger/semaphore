---
- name: Install 7-Zip (MSI) on Windows Host via Mapped Drive
  hosts: windows # Target host group
  gather_facts: no

  vars:
    app_name: "7-Zip 25.01 (x64)"
    
    # --- UNC PATH CONFIGURATION ---
    mapped_drive_letter: "Z:" # CRITICAL: Drive letter on target host for temporary mapping
    share_unc_root: "\\\\kevireis-home\\i$"
    
    # Path relative to the share root (used after mapping the Z: drive)
    installer_relative_path: "Applications\\Utilities\\7-Zip\\v25.01\\Setup.msi" 
    
    # Full source path for win_copy, using the mapped drive letter
    installer_mapped_path: "{{ mapped_drive_letter }}\\{{ installer_relative_path }}"
    
    # Local path on the target Windows machine for installation
    local_installer_path: 'C:\Windows\Temp\7zip_install.msi'
    
    # CRITICAL: Product ID for 7-Zip 25.01 x64
    product_id: "{23170F69-40C1-2702-2501-000100000000}" 

    # --- REQUIRED: Set these via Semaphore Credential! ---
    share_username: ""
    share_password: ""
    # ---------------------------------------------------

  tasks:
    - name: 1. MAP UNC Path to Drive Letter (Z:) and Authenticate Session
      # Map the share to Z: using credentials. This is more reliable than raw UNC path authentication.
      ansible.windows.win_shell: 'net use "{{ mapped_drive_letter }}" "{{ share_unc_root }}" "{{ share_password }}" /user:"{{ share_username }}" /persistent:no /force'
      no_log: true
      ignore_errors: yes 
      register: auth_result

    - name: "Diagnostic: Check Authentication Status"
      ansible.builtin.debug:
        msg: "Task 1 Auth Attempt Result: {{ auth_result.stdout_lines | default(auth_result.msg) }}"
      when: auth_result.rc != 0

    - name: 2. COPY 7-Zip Installer to Local Temp Directory (Using Mapped Drive Z:)
      # Now copying from the local Z: drive, which solves the delegation/double-hop issue.
      ansible.windows.win_copy:
        src: "{{ installer_mapped_path }}"
        dest: "{{ local_installer_path }}"
        remote_src: yes # The source path (Z:\...) exists on the remote machine
      register: copy_result
      # Only run if authentication was attempted/successful
      when: auth_result is not skipped
      
    - name: 3. INSTALL 7-Zip from Local Path (with Idempotency Check)
      # Executes the installer from the local disk.
      ansible.windows.win_shell: |
        $AppID = '{{ product_id }}'
        # Check registry for the product ID
        $Installed = Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* -ErrorAction SilentlyContinue |
                     Where-Object {$_.PSChildName -eq $AppID}
        
        if (-not $Installed) {
            Write-Host "Installing {{ app_name }} from LOCAL path: {{ local_installer_path }}"
            # Run msiexec directly from the local C:\Windows\Temp path
            msiexec.exe /i "{{ local_installer_path }}" /qn /norestart
        } else {
            Write-Host "{{ app_name }} is already installed. Skipping installation."
        }
      register: install_result
      changed_when: "'Installing' in install_result.stdout"
      when: copy_result is succeeded

    - name: 4. CLEANUP local installer file
      # Remove the temporary installer from the target machine.
      ansible.windows.win_file:
        path: "{{ local_installer_path }}"
        state: absent
      # Only clean up if the copy task succeeded.
      when: copy_result is succeeded

    - name: 5. UN-AUTHENTICATE (Delete Mapped Drive Z:)
      # Deletes the temporary mapped drive, ignoring cleanup errors.
      ansible.windows.win_command: net use "{{ mapped_drive_letter }}" /delete
      ignore_errors: yes 
      failed_when: false

    - name: Display installation status
      ansible.builtin.debug:
        msg: "Installation task complete. Output: {{ install_result.stdout_lines | default('Installation status not captured, check host logs.') }}"
